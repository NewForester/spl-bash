#!/bin/bash --posix

##
##  Goal:   semi-automate system configuration of ssh
##
##  Use:    source sysconf-ssh
##
##          sshConf step-number-or-name
##
##  NB:     This script is expected to be sourced by the sysconf script:
##          it is not expected to be used standalone.
##
##  This script is concerned principally with configuring ssh.
##
##  The idea is that all hosts have a common /etc/ssh/ssh_known_hosts in which
##  the server keys for all hosts are stored.  This avoids 'unknown do you want
##  to continue' messages.
##
##  Each new installation generates a new set of keys but the old set are
##  carried forward.  It was thought this would lead to less disruption.  For
##  the current release, dsa keys are being replaced by ecdsa keys anyway.  As
##  each host is upgraded, the /etc/ssh/ssh_known_hosts will be updated and
##  will have to be propagated to all hosts, upgraded or not.
##
##  This script also installs and configures an rsync server, which is used to
##  backup up entire logical volume over the LAN.
##
##  The script also has steps for installing rsh.  At one time it was thought
##  that rsh, without the encryption of ssh, would be a better choice for rsync
##  backups but trials were inconclusive.  Until a clearly superior solution is
##  found, these steps remain just in case they are needed again.
##

function defineSteps
{
    local major="$1"; shift;
    local minor=0;

    minor=$((minor+1));
    sshInstall=$major.$minor;

    minor=$((minor+1));
    sshConfigure=$major.$minor;

    minor=$((minor+1));
    sshKeys=$major.$minor;

    minor=$((minor+1));
    sshKnownHosts=$major.$minor;

    minor=$((minor+1));
    rsyncInstall=$major.$minor;

    minor=$((minor+1));
    rsyncConfigure=$major.$minor;

    minor=$((minor+1));
    rshNetkitClient=$major.$minor.C;
    rshNetkitServer=$major.$minor.S;

    minor=$((minor+1));
    rshRedoneClient=$major.$minor.C;
    rshRedoneServer=$major.$minor.S;
}

function sshConf
{
    local major="$1"; shift;
    defineSteps $major;

    case "$1" in
      ($major | ssh | rsync | rsh)
        listOptions sysconf-ssh "$1";
        quit;
        ;;

      ($sshInstall | sshInstall)
        step="${sshInstall} sshInstall";
        note "Install ntp and ssh and rsync packages ...";

        installPackage ntp openssh-client openssh-server rsync;
        DoOrDie SaveCurrent /etc/{group,passwd};
        ;;

      ($sshConfigure | sshConfigure)
        step="${sshConfigure} sshConfigure";
        note "Configure ssh access ...";

        echo "... patch client and server configuration files";
        DoOrDie CopyToKeep /etc/ssh/{ssh_config,sshd_config};
        DoOrDie ApplyPatch /etc/ssh/{ssh_config,sshd_config};

        echo "... install the known hosts file";
        DoOrDie InstallOurOwn /etc/ssh/ssh_known_hosts;

        echo "... update /etc/hosts.allow";
        DoOrDie CopyToKeep /etc/hosts.allow;
        DoOrDie InsertIntoFile '/localhost/' /etc/hosts.allow hosts.allow-ssh;
        DoOrDie Deploy /etc/hosts.allow;

        echo "... refresh the ssh service";
        DoOrDie sudo service ssh stop;
        DoOrDie sudo service ssh start;
        ;;

      ($sshKeys | sshKeys)
        step="${sshKeys} sshKeys";
        note "Restore and backup ssh keys ...";

        local keep="keep/etc/ssh";
        local master="${installShare}/${0##*/}/${HOSTNAME}/ssh";

        if [[ -e "${master}" ]]; then
            echo "... restore ssh keys from a previous installation";
            DoOrDie cp -p ${master}/*_key.pub ${keep};
            DoOrDie sudo cp -p ${master}/*_key ${keep};

            DoOrDie sudo cp --preserve=timestamps ${keep}/*_key.pub /etc/ssh;
            DoOrDie sudo cp -p ${keep}/*_key /etc/ssh;
        else
            DoOrDie mkdir -p ${keep} ${master};
        fi

        echo "... backup ssh keys from the current installation";
        DoOrDie cp -p /etc/ssh/*_key.pub ${keep};
        DoOrDie sudo cp -p /etc/ssh/*_key ${keep};

        DoOrDie cp -p ${keep}/*_key.pub ${master};
        DoOrDie sudo cp -p ${keep}/*_key ${master};
        ;;

      ($sshKnownHosts | sshKnownHosts)
        step="${sshKnownHosts} sshKnownHosts";
        note "Update known_hosts with new host key ...";

        cd keep/etc/ssh > /dev/null;

            local master="${installShare}/${0##*/}/etc/ssh";
            local hostIp=$(awk "/${HOSTNAME}/"'{ print $1 }' /etc/hosts);

            DoOrDie cp -p ssh_host_ecdsa_key.pub "${HOSTNAME}_key.pub";
            DoOrDie sed -i "${HOSTNAME}_key.pub" -e "'s/^/${HOSTNAME},${hostIp} /'" -e "'s/ root@${HOSTNAME}\$//'";

            DoOrDie mv -f ssh_known_hosts ssh_known_hosts.new;
            DoOrDie sed -i ssh_known_hosts.new -e "'/${HOSTNAME}/d'" -e "'/^\$/d'";
            DoOrDie sed -i ssh_known_hosts.new -e "'\$r ${HOSTNAME}_key.pub'";
            DoOrDie sort -o ssh_known_hosts -t . -n -k 4 ssh_known_hosts.new;

            DoOrDie rm -f "${HOSTNAME}_key.pub" ssh_known_hosts.new;

            DoOrDie cp -p ssh_known_hosts "${master}";

        cd - > /dev/null;

        DoOrDie Deploy /etc/ssh/ssh_known_hosts;
        ;;

      ($rsyncInstall | rsyncInstall)
        step="${rsyncInstall} rsyncInstall";
        note "Install rsync and inetd ...";

        installPackage openbsd-inetd rsync;
        ;;

      ($rsyncConfigure | rsyncConfigure)
        step="${rsyncConfigure} rsyncConfigure";
        note "Configure the rsync daemon and inetd ...";

        echo "... configure inetd to run rsyncd";
        DoOrDie CopyToKeep /etc/inetd.conf;
        DoOrDie sudo update-inetd --group BSD --remove "'rsync'"
        DoOrDie sudo update-inetd --group BSD --add "'rsync\t\tstream\ttcp\tnowait\troot\t/usr/bin/rsync rsyncd --daemon --bwlimit=56'"

        echo "... install the local rsyncd configuration";
        DoOrDie InstallOurOwn /etc/rsyncd.conf;
        ;;

      ($rshNetkitClient | rshNetkitClient)
        step="${rshNetkitClient} rshNetkitClient";
        note "Install net-kit rsh client ...";

        replacePackage rsh-redone-client rsh-client;
        ;;

      ($rshNetkitServer | rshNetkitServer)
        step="${rshNetkitServer} rshNetkitServer";
        note "Install net-kit rsh server ...";

        replacePackage rsh-redone-server rsh-server;
        ;;

      ($rshRedoneClient | rshRedoneClient)
        step="${rshRedoneClient} rshRedoneClient";
        note "Install rsh redone client ...";

        replacePackage rsh-client rsh-redone-client;
        ;;

      ($rshRedoneServer | rshRedoneServer)
        step="${rshRedoneServer} rshRedoneServer";
        note "Install rsh redone server ...";

        replacePackage rsh-server rsh-redone-server;
        ;;

      ($major.99)
        step="$major.99 sanityCheck";
        note "Checking ssh ...";
        listLoggedSteps $major | while read step name status; do
            printf "%-7s %-23s %s\n" $step $name $status;
            case "$installDist $name" in
              (*sshInstall)
                CheckCurrent /etc/{group,passwd};
                ;;
              (*sshConfigure)
                CheckOriginal /etc/ssh/{ssh_config,sshd_config};
                CheckPatch /etc/ssh/{ssh_config,sshd_config};
                CheckOurOwn /etc/ssh/ssh_known_hosts;
                CheckOriginal /etc/hosts.allow;
                CheckDotDir /etc/hosts.allow hosts.allow-ssh;
                ;;
              (*sshKeys)
                CheckOurOwn --sudo /etc/ssh/ssh_host_*key;
                CheckOurOwn /etc/ssh/ssh_host_*key.pub;
                ;;
              (*rsyncInstall)
                CheckCurrent /etc/{group,passwd};
                ;;
              (*rsyncConfigure)
                CheckOriginal /etc/inetd.conf;
                CheckOurOwn /etc/rsyncd.conf;
                ;;
              (*rshNetkitClient | *rshNetkitServer)
                CheckCurrent /etc/{group,passwd};
                ;;
              (*rshRedoneClient | *rshRedoneServer)
                CheckCurrent /etc/{group,passwd};
                ;;
            esac
        done
        quit;
        ;;

      (*)
        badOption "$1";
        listOptions sysconf-ssh $major;
        quit 1;
        ;;
    esac
}

### Local Variables: ***
### mode:ksh ***
### End: ***
