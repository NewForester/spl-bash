#!/bin/bash --posix

##
##  Goal:   semi-automate system configuration of hosts files
##
##  Use:    source sysconf-hosts
##
##          hostsConf step-number-or-name
##
##  NB:     This script is expected to be sourced by the sysconf script:
##          it is not expected to be used standalone.
##
##  This script configures a number of network related files:
##
##      /etc/ethers
##      /etc/networks
##      /etc/hosts
##      /etc/hosts.allow
##      /etc/hosts.deny
##
##  The deployed /etc/hosts and /etc/hosts.allow files are constructed
##  using the files found in keep/etc/hosts.d and keep/etc/hosts.allow.d
##  subdirectories.
##
##  Several later steps (such as vpnHosts) add files to these directories
##  and then construct and deploy the /etc files again.
##
##  For debug purposes, the subdirectories can be deleted to restart with
##  a clean slate.  Use the step number (not name) and the suffix .R.  Thus:
##
##      sysconf 4.1.R   # deletes keep/etc/hosts.d
##      sysconf 4.2.R   # deleted keep.etc/hosts.allow.d
##
##  The file /etc/ethers is optional.  It has been used at work to identity
##  hosts by Ethernet address on a WIFI network that used dynamic allocation
##  of IP addresses.
##

function defineSteps
{
    local major="$1"; shift;
    local minor=0;

    minor=$((minor+1));
    hostsConfigure=$major.$minor;

    minor=$((minor+1));
    hostsAccess=$major.$minor;
}

function hostsConf
{
    local major="$1"; shift;
    defineSteps $major;

    case "$1" in
      ($major | hosts)
        listOptions sysconf-hosts "$1";
        quit;
        ;;

      ($hostsConfigure | $hostsConfigure.R | hostsConfigure)
        step="$hostsConfigure hostsConfigure";
        note "Configure hosts and networks ...";

        DoOrDie InstallOurOwn --opt /etc/ethers;

        DoOrDie CopyToKeep /etc/networks;
        DoOrDie ApplyPatch /etc/networks;

        if [[ "$1" == "$hostsConfigure.R" ]]; then
            DoOrDie rm -fr keep/etc/hosts.d;
        fi

        DoOrDie CopyToKeep /etc/hosts;
        DoOrDie InsertIntoFile '2' /etc/hosts hosts-local;

        if [[ $(fgrep -c "${HOSTNAME}" keep/etc/hosts) -gt 1 ]]; then
            DoOrDie sed -i keep/etc/hosts -e "'2d'";
        fi

        DoOrDie Deploy /etc/hosts;
        ;;

      ($hostsAccess | $hostsAccess.R | hostsAccess)
        step="$hostsAccess hostsAccess";
        note "Configure hosts.allow and hosts.deny ...";

        if [[ "$1" == "$hostsAccess.R" ]]; then
            DoOrDie rm -fr keep/etc/hosts.allow.d;
        fi

        DoOrDie CopyToKeep /etc/hosts.deny;
        DoOrDie ApplyPatch /etc/hosts.deny;

        DoOrDie CopyToKeep /etc/hosts.allow;
        DoOrDie InsertIntoFile '/localhost/' /etc/hosts.allow hosts.allow-ssh;
        DoOrDie Deploy /etc/hosts.allow;
        ;;

      ($major.99)
        step="$major.99 sanityCheck";
        note "Checking hosts ...";
        listLoggedSteps $major | while read step name status; do
            printf "%-7s %-23s %s\n" $step $name $status;
            case "$installDist $name" in
              (*hostsConfigure)
                CheckOurOwn --opt /etc/ethers;
                CheckOriginal /etc/networks;
                CheckPatch /etc/networks;
                CheckOriginal /etc/hosts;
                CheckDotDir /etc/hosts hosts-local;
                ;;
              (*hostsAccess)
                CheckOriginal /etc/hosts.deny;
                CheckPatch /etc/hosts.deny;
                CheckOriginal /etc/hosts.allow;
                CheckDotDir /etc/hosts.allow hosts.allow-ssh;
                ;;
            esac
        done
        quit;
        ;;

      (*)
        badOption "$1";
        listOptions sysconf-hosts $major;
        quit 1;
        ;;
    esac
}

### Local Variables: ***
### mode:ksh ***
### End: ***
