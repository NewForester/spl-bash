#!/bin/bash --posix

##
##  Goal:   semi-automate system configuration of network interfaces and manager
##
##  Use:    source sysconf-net
##
##          netConf step-number-or-name
##
##  NB:     This script is expected to be sourced by the sysconf script:
##          it is not expected to be used standalone.
##
##  This script is concerned with configuring network interfaces.
##
##  It was heavily revised between the last release and this one:  the old
##  steps remain, commented out, just in case.  In the near future the
##  reordering of steps is likely.
##
##  At the time this script was first written, the 'network manager' was a
##  relatively new component of the desktop.  After a couple of kerfuffles, it
##  was decided that particular piece of patronware had to go.  It was replaced
##  with wicd and even that was not to be trusted:  the command line ifup etc.
##  also had to work.
##
##  This led to this script having two halves:  the first replaced the network
##  manager with wicd, the second half configured /etc/network with interface
##  definitions.
##
##  The configuration of /etc/network was for a long time a bit of a bodge.  It
##  relied on the user/administrator switching between configurations by hand
##  whenever necessary.  Although this involved only changing a symbolic link
##  it was viewed as a poor do and was increasingly annoying for the laptop as
##  it was being used at both home and work.
##
##  Overtime, the sophistication of /etc/network/interfaces grew to the point
##  where the laptop installation required a shell script to probe for known
##  wifi networks and this script need serious revision to cope.
##
##  Now it installs a (host specific) /etc/network/interfaces file and inspects
##  the contents.  It uses the 'source' statements to determine which files
##  need to be installed in /etc/network/interfaces.d.
##
##  Once this mechanism has been proven robust enough for all hosts, the old
##  steps will be removed.
##
##  Catch-22 warning:  bridge network operation is required on hosts that may
##  run virtual machines.  This script is run long before that which installs
##  kvm and its dependencies.  Currently the user/administrator must know to
##  run the netBridgeInstall step before netInterfaces and then to tweak by
##  hand the wicd configuration.
##

function defineSteps
{
    local major="$1"; shift;
    local minor=0;

    minor=$((minor+1));
    netWicdInstall=$major.$minor;

    minor=$((minor+1));
    netWicdDesktop=$major.$minor.D;
    netWicdLaptop=$major.$minor.L;

#     minor=$((minor+1));
#     netNetworkManager=$major.$minor;

#     minor=$((minor+1));
#     netLoopback=$major.$minor;

#     minor=$((minor+1));
#     netWired=$major.$minor;

#     minor=$((minor+1));
#     netBridged=$major.$minor;

#     minor=$((minor+1));
#     netWifi=$major.$minor;

    minor=$((minor+1));
    netBridgeInstall=$major.$minor;

    minor=$((minor+1));
    netInterfaces=$major.$minor;
}

function netConf
{
    local major="$1"; shift;
    defineSteps $major;

    local junk file needmap;

    case "$1" in
      ($major | net)
        listOptions sysconf-net "$1";
        quit;
        ;;

      ($netWicdInstall | netWicdInstall)
        step="$netWicdInstall netWicdInstall";
        note "Install wicd ...";

#         if [[ -h /etc/resolv.conf ]]; then
#            # Fix ubuntu brain death
#            local link=$(ls -ld /etc/resolv.conf | sed -e "s/.*-> //");
#            if [[ "${link:0:2}" == ".." ]]; then
#                 DoOrDie sudo rm /etc/resolv.conf;
#                 DoOrDie sudo ln -s ${link:2} /etc/resolv.conf;
#            fi
#         fi

        installPackage wicd;
        ;;

      ($netWicdDesktop | netWicdDesktop)
        step="$netWicdDesktop netWicdDesktop";
        note "Configure wicd for desktop operation ...";

        for file in $(ls /etc/wicd/*-settings.conf 2> /dev/null); do
            DoOrDie CopyToKeep --sudo ${file};
        done

        DoOrDie sudo service wicd stop;
        DoOrDie alternative=desktop;
        DoOrDie InstallOurOwn --sudo /etc/wicd/{manager,wired,wireless}-settings.conf;
        DoOrDie sudo service wicd start;
       ;;

      ($netWicdLaptop | netWicdLaptop)
        step="$netWicdLaptop netWicdLaptop";
        note "Configure wicd for laptop operation ...";

        for file in $(ls /etc/wicd/*-settings.conf 2> /dev/null); do
            DoOrDie CopyToKeep --sudo ${file};
        done

        DoOrDie sudo service wicd stop;
        DoOrDie alternative=laptop;
        DoOrDie InstallOurOwn --sudo /etc/wicd/{manager,wired,wireless}-settings.conf;
        DoOrDie sudo service wicd start;
       ;;

#       ($netNetworkManager | netNetworkManager)
#         step="$netNetworkManager netNetworkManager";
#         note "Disable the network manager ...";
#
#         echo "... backup original interfaces";
#         if [[ -e /etc/network/interfaces.bak-0 ]]; then
#             DoOrDie sudo mv /etc/network/interfaces{.bak-0,};   # undo brain death
#         fi
#
#         DoOrDie CopyToKeep /etc/network/interfaces;
#         DoOrDie chmod 600 "keep/etc/network/interfaces.${RELEASE}";
#
#         if [[ -e /etc/init.d/network-manager ]]; then
#             echo "... nobble the NetworkManager";
#             DoOrDie InstallOurOwn /etc/default/NetworkManager;
#             DoOrDie sudo service network-manager stop;
#         fi
#
#         fini="you really should reboot at this point"
#         ;;

#       ($netLoopback | netLoopback)
#         step="$netLoopback netLoopback";
#         note "Configure only loopback network ...";
#
#         DoOrDie InstallOurOwn /etc/network/interfaces.lo;
#
#         DoOrDie sudo ln -sf interfaces.lo /etc/network/interfaces;
#         ;;

#       ($netWired | netWired)
#         step="$netWired netWired";
#         note "Configure wired network operation ...";
#
#         DoOrDie InstallOurOwn /etc/network/interfaces.eth0;
#
#         local if0;
#         for if0 in br0 eth0 wlan0; do
#             fgrep -q ${if0} /etc/network/run/ifstate && DoOrDie sudo ifdown ${if0};
#         done
#
#         DoOrDie sudo ln -sf interfaces.eth0 /etc/network/interfaces;
#         DoOrDie sudo ifup eth0;
#         ;;

#       ($netBridged | netBridged)
#         step="$netBridged netBridged";
#         note "Configure bridged network operation ...";
#
#         DoOrDie InstallOurOwn /etc/network/interfaces.br0;
#
#         local if0;
#         for if0 in br0 eth0 wlan0; do
#             fgrep -q ${if0} /etc/network/run/ifstate && DoOrDie sudo ifdown ${if0};
#         done
#
#         DoOrDie sudo ln -sf interfaces.br0 /etc/network/interfaces;
#         DoOrDie sudo ifup br0;
#         ;;

#       ($netWifi | netWifi)
#         step="$netWifi netWifi";
#         note "Configure /etc/network/interfaces for WIFI ...";
#
#         DoOrDie InstallOurOwn /etc/network/interfaces.wifi;
#         DoOrDie InstallOurOwn /etc/network/wifi-map;
#
#         while read junk file; do
#             [[ "${junk}" != "source" ]] && continue;
#
#             DoOrDie InstallOurOwn /etc/network/${file};
#         done < keep/etc/network/interfaces.wifi
#
#         local if0;
#         for if0 in br0 eth0 wlan0; do
#             fgrep -q ${if0} /etc/network/run/ifstate && DoOrDie sudo ifdown ${if0};
#         done
#
#         DoOrDie sudo ln -sf interfaces.wifi /etc/network/interfaces;
#         DoOrDie sudo ifup wlan0;
#         ;;

      ($netBridgeInstall | netBridgeInstall)
        step="$netBridgeInstall netBridgeInstall";
        note "Install utilities need for bridged network operation ...";

        installPackage bridge-utils;
        ;;

      ($netInterfaces | netInterfaces)
        step="$netInterfaces netInterfaces";
        note "Configure network interfaces ...";

        DoOrDie CopyToKeep /etc/network/interfaces;
        DoOrDie InstallOurOwn /etc/network/interfaces;

        while read junk file; do
            [[ "${junk}" != "source" ]] && continue;

            if [[ -r "${file}" ]]; then
                DoOrDie InstallOurOwn "${file}";
            else
                DoOrDie InstallOurOwn --sudo "${file}";
            fi

            if [[ "${file/wifi-/}" != "${file}" ]]; then
                needmap=1;
            fi
        done < keep/etc/network/interfaces

        if [[ -n "${needmap}" ]]; then
            DoOrDie InstallOurOwn /etc/network/wifi-map;
        else
            DoOrDie RemoveOurOwn /etc/network/wifi-map;
        fi

        local state;
        for state in $(cat /etc/network/run/ifstate); do
            if [[ "${state%=*}" != "lo" ]]; then
                DoOrDie sudo ifdown "${state%=*}";
            fi
        done

        DoOrDie sudo ifup -a;
        DoOrDie sudo ifup -a --allow=default;

        fini="you may need to adjust you wicd configuration to use br0 instead of eth0"
        ;;

      ($major.99)
        step="$major.99 sanityCheck";
        note "Checking net ...";
        listLoggedSteps $major | while read step name status; do
            printf "%-7s %-23s %s\n" $step $name $status;
            case "$installDist $name" in
              (*netWicdInstall)
                CheckCurrent /etc/{group,passwd};
                ;;
              (*netWicdDesktop | *netWicdLaptop)
                CheckOriginal --sudo /etc/wicd/*-settings.conf;
                local file;
                for file in $(ls /etc/wicd/*-settings.conf 2> /dev/null); do
                    if [[ -e "keep/${file}" ]]; then
                        (DoOrDieLocal sudo inisort "${file}" '|' sudo diff - "keep${file}");
                    else
                        error "keep/${file}" missing;
                    fi
                done
                ;;
#               (*netNetworkManager)
#                 CheckOriginal /etc/network/interfaces;
#                 CheckOurOwn /etc/default/NetworkManager;
#                 ;;
              (*netBridgeInstall)
                CheckCurrent /etc/{group,passwd};
                ;;
              (*netInterfaces)
                CheckOurOwn /etc/network/interfaces;
                while read junk file; do
                    [[ "${junk}" != "source" ]] && continue;

                    if [[ "${file/wifi-/}" != "${file}" ]]; then
                        needmap=1;
                    fi
                    if [[ -r "${file}" ]]; then
                        CheckOurOwn "${file}";
                    else
                        CheckOurOwn --sudo "${file}";
                    fi
                done < /etc/network/interfaces

                if [[ -n "${needmap}" ]]; then
                    CheckOurOwn /etc/network/wifi-map;
                fi
                ;;
            esac
        done
        quit;
        ;;

      (*)
        badOption "$1";
        listOptions sysconf-net $major;
        quit 1;
        ;;
    esac
}

### Local Variables: ***
### mode:ksh ***
### End: ***
