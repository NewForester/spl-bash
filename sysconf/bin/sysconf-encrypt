#!/bin/bash --posix

##
##  Goal:   semi-automate system configuration of encrypted volumes
##
##  Use:    source sysconf-encrypt
##
##  NB:     The caller must source functions etc Ã  la sysconf script.
##

function defineSteps
{
    local major="$1"; shift;
    local minor=0;

    minor=$((minor+1));
    encryptInstall=$major.$minor;

    minor=$((minor+1));
    encryptLogicalVolume=$major.$minor;

    minor=$((minor+1));
    encryptConfigure=$major.$minor;

    minor=$((minor+1));
    encryptLuksSetup=$major.$minor;

    minor=$((minor+1));
    encryptMount=$major.$minor;

    minor=$((minor+1));
    encryptUmount=$major.$minor;
}

function encryptConf
{
    local major="$1"; shift;
    defineSteps $major;

    local target source junk;

    case "$1" in
      ($major | encrypt)
        listOptions sysconf-encrypt "$1";
        quit;
        ;;

      ($encryptInstall | encryptInstall)
        step="$encryptInstall encryptInstall";
        note "Install the cryptsetup package ...";

        installPackage cryptsetup;
        ;;

      ($encryptLogicalVolume | encryptLogicalVolume)
        step="$encryptLogicalVolume encryptLogicalVolume";
        note "Create the logical volume for encryption ...";

        createLogicalVolume "${installDist}" crypt;
        createVolumeMountPoint /crypt;
        DoOrDie sudo umount /crypt;
        ;;

      ($encryptConfigure | encryptConfigure)
        step="$encryptConfigure encryptConfigure";
        note "Create /etc/crypttab ...";

        DoOrDie CopyToKeep /etc/crypttab;
        DoOrDie InstallOurOwn /etc/crypttab;
        ;;

      ($encryptLuksSetup | encryptLuksSetup)
        step="$encryptLuksSetup encryptLuksSetup";

        note "Setup the encrypted volume(s) ...";

        while read target source junk; do
            [[ -z "$target" || "$target" == "#" ]] && continue;
            [[ -b "/dev/mapper/${target}" ]] && continue;

            DoOrDie sudo cryptsetup --verbose --verify-passphrase luksFormat "${source}";
            DoOrDie sudo cryptsetup luksOpen "${source}" "${target}";
            DoOrDie sudo mkfs.ext4 -L "${target}" "/dev/mapper/${target}";
        done < /etc/crypttab

        fini="run sysconf blkdevFstab before running the next step";
        ;;

      ($encryptMount | encryptMount)
        step="$encryptMount encryptMount";
        note "Start and mount the encrypted volume(s) ...";

        DoOrDie sudo service cryptdisks force-start;

        while read target source junk; do
            [[ -z "$target" || "$target" == "#" ]] && continue;

            DoOrDie mount "/dev/mapper/${target}";
        done < /etc/crypttab
        ;;

      ($encryptUmount | encryptUmount)
        step="$encryptUmount encryptUmount";
        note "Unmount and stop the encrypted volume(s) ...";

        while read target source junk; do
            [[ -z "$target" || "$target" == "#" ]] && continue;

            DoOrDie umount "/dev/mapper/${target}";
        done < /etc/crypttab

        DoOrDie sudo service cryptdisks stop;
        ;;

      ($major.99)
        step="$major.99 sanityCheck";
        note "Checking encrypt ...";
        listLoggedSteps $major | while read step name status; do
            printf "%-7s %-23s %s\n" $step $name $status;
            case "$installDist $name" in
              (*encryptInstall)
                CheckCurrent /etc/{passwd,group};
                ;;
              (*encryptLogicalVolume)
                (DoOrDie ls -ld /crypt);
                (DoOrDie fgrep /crypt /etc/fstab);
                ;;
              (*encryptConfigure)
                CheckOriginal /etc/crypttab;
                CheckOurOwn /etc/crypttab;
                ;;
            esac
        done
        quit;
        ;;

      (*)
        badOption "$1";
        listOptions sysconf-encrypt $major;
        quit 1;
        ;;
    esac
}

### Local Variables: ***
### mode:ksh ***
### End: ***
