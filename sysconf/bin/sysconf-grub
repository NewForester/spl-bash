#!/bin/bash --posix

##
##  Goal:   semi-automate system configuration of grub
##
##  Use:    source sysconf-grub
##
##          grubConf step-number-or-name
##
##  NB:     This script is expected to be sourced by the sysconf script:
##          it is not expected to be used standalone.
##
##  There are three steps commented out that have been pertinent in the past
##  and may still be on certain hosts.
##
##  The first step should always be run in the interests of disaster recovery.
##
##  The other two steps arise from how the dual disk system was set up.  A boot
##  partition was created on each disk but these are not under RAID I so they
##  are separate partitions with distinct UUIDs.  It should be possible to boot
##  the system with only one disk.  Either disk.
##
##  The grub configuration that is generated is defaced with the UUID of the
##  boot partition of the first disk making it impossible to boot from the
##  second disk.
##
##  One of the steps alters grub configuration so that the UUID is not used.
##  The second copies the contents of the first boot partition to the second
##  so that it can be kept in sync (by hand).
##
##  The next installation will try the two boot partitions in a RAID I
##  configuration and these steps should be unnecessary.
##

function defineSteps
{
    local major="$1"; shift;
    local minor=0;

    minor=$((minor+1));
    grubInitialSave=$major.$minor;

    minor=$((minor+1));
    grubNoUuid=$major.$minor;

    minor=$((minor+1));
    grubDualDisk=$major.$minor;

#     minor=$((minor+1));
#     grubWithoutUsb=$major.$minor;
#
#     minor=$((minor+1));
#     grubNoProbe=$major.$minor;
#
#     minor=$((minor+1));
#     grubNoAcpi=$major.$minor;
}

function grubConf
{
    local major="$1"; shift;
    defineSteps $major;

    local map="/boot/grub/device.map";
    local cfg="/boot/grub/grub.cfg";

    case "$1" in
      ($major | grub)
        listOptions sysconf-grub "$1";
        quit;
        ;;

      ($grubInitialSave | grubInitialSave)
        step="$grubInitialSave grubInitialSave";
        note "Initial save of grub configuration files ...";

        echo "... backup grub configuration";
        DoOrDie CopyToKeep /boot/grub/grub.cfg;
        if [[ -e /boot/grub/device.map ]]; then
            DoOrDie CopyToKeep /boot/grub/device.map;
        fi
        ;;

       ($grubNoUuid | grubNoUuid)
        step="$grubNoUuid grubNoUuid";
        note "Regenerate grub boot configuration without UUID ...";

        local save="/boot/grub/grub-$(date +'%y-%m-%d').cfg";

        DoOrDie SaveCurrent /boot/grub/grub.cfg;

        DoOrDie cp -pf keep/boot/grub/grub.cfg "keep/${save}";
        DoOrDie sed -i keep/boot/grub/grub.cfg -e "'/--set=root/s/search/true # &/'";

        DoOrDie Deploy /boot/grub/grub.cfg "${save}";
        ;;

      ($grubDualDisk | grubDualDisk)
        step="$grubDualDisk grubDualDisk";
        note "Copy /boot to second disk ...";

        local boot=$(df | sed -e '/\/boot/!d' -e 's/ .*//');

        if [[ "${boot}" != "/dev/sda8" ]]; then
            echo "Unexpected boot device ${boota}: is not /dev/sda8";
            exit 1;
        fi

        DoOrDie sudo mount /dev/sdb8 /mnt;
        DoOrDie sudo cp -a /boot/* /mnt/;
        DoOrDie sudo umount /mnt;
        ;;

#      ($grubWithoutUsb | grubWithoutUsb)
#         step="$grubWithoutUsb grubWithoutUsb";
#         note "Regenerate grub boot list without the USB ...";
#
#         DoOrDie sudo rm -f "${map}";
#         DoOrDie sudo update-grub;
#
#         local file;
#         for file in "${cfg}" "${map}"; do
#             if [[ -e ${file} ]]; then
#                 DoOrDie cp -pf "${file}" "keep${file}.nousb";
#             fi
#         done
#         ;;
#
#       ($grubNoProbe | grubNoProbe)
#         step="$grubNoProbe grubNoProbe";
#         note "Regenerate grub boot list without hard drive ...";
#
#         DoOrDie CopyToKeep /etc/grub.d/30_os-prober;
#         DoOrDie InstallOurOwn /etc/grub.d/30_os-prober;
#
#         DoOrDie sudo rm "${map}";
#         DoOrDie sudo update-grub;
#         ;;
#
#       ($grubNoAcpi | grubNoAcpi)
#         step="$grubNoAcpi grubNoAcpi";
#         note "Regenerate grub boot list with acpi=off ...";
#
#         DoOrDie CopyToKeep /etc/default/grub;
#         DoOrDie ApplyPatch /etc/default/grub;
#
#         DoOrDie sudo update-grub;
#
#         DoOrDie cp -pf "${cfg}" "keep${cfg}.noacpi";
#         ;;

      ($major.99)
        step="$major.99 sanityCheck";
        note "Checking grub ...";
        listLoggedSteps $major | while read step name status; do
            printf "%-7s %-23s %s\n" $step $name $status;
            case "$installDist $name" in
              (*grubInitialSave)
                CheckOriginal /boot/grub/grub.cfg;
                CheckOriginal --opt /boot/grub/device.map;
                ;;
              (*grubNoUuid)
                CheckCurrent "${cfg}";
                ;;
              (*grubDualDisk)
                (DoOrDie sudo mount /dev/sdb8 /mnt);
                (DoOrDie sudo diff "${cfg}" "${cfg/boot/mnt}");
                (DoOrDie sudo umount /mnt);
                ;;

              # old but still needed for checking

              (*grubWithoutUsb)
                CheckOriginal --nousb "${cfg}" "${map}";
                ;;
              (*grubNoProbe)
                CheckOriginal /etc/grub.d/30_os-prober;
                CheckOurOwn /etc/grub.d/30_os-prober;
                ;;
              (*grubNoAcpi)
                CheckOriginal /etc/default/grub;
                CheckPatch /etc/default/grub;
                CheckOriginal --noacpi "${cfg}";
                ;;
            esac
        done
        quit;
        ;;

      (*)
        badOption "$1";
        listOptions sysconf-grub $major;
        quit 1;
        ;;
    esac
}

### Local Variables: ***
### mode:ksh ***
### End: ***
