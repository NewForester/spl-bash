#!/bin/bash --posix

##
##  Goal:   bootstrap semi-automated system configuration
##
##  Use:    source sysconf-bootstrap
##
##          bootstrapConf step-number-or-name
##
##  NB:     This script is expected to be sourced by the sysconf script:
##          it is not expected to be used standalone.
##
##  This script sets up sysconf so that it can be run from the command line.
##  However the first few steps must be run by hand.  The most convenient way
##  of doing this is to login in to the host to be configured using ssh and
##  copy and paste from this script into the ssh tty.
##
##  Copy and paste the lines between the parentheses that appear after a note
##  statement.  Make sure the final echo is executed.  This confirms the code
##  just pasted executed successfully and tells you what to do next.
##
##  Run the first step, this will tell you which of the next two to run.  These
##  will tell you to log out and back in again.  The next two steps also need
##  to be run by hand but for the step after you run sysconf the hard way.
##
##  After logging out and back in again the next two steps can be run from the
##  command line by entering sysconf and the step name or number.  This serves
##  to confirm sysconf is set up properly for normal use.
##

function defineSteps
{
    local major="$1"; shift;
    local minor=0;

    minor=$((minor+1));
    firstStep=$major.$minor;

    minor=$((minor+1));
    rootPassword=$major.$minor.R;
    sudoersGroup=$major.$minor.S;

    minor=$((minor+1));
    mountSysconf=$major.$minor;

    minor=$((minor+1));
    installScripts=$major.$minor;

    minor=$((minor+1));
    bashProfile=$major.$minor;

    minor=$((minor+1));
    initialSave=$major.$minor;

    minor=$((minor+1));
    numlockOn=$major.$minor;
}

function bootstrapConf
{
    local major="$1"; shift;
    defineSteps $major;

    case "$1" in
      ($major | bootstrap)
        listOptions sysconf-bootstrap "$1";
        quit;
        ;;

      ($firstStep | firstStep)
        error "Do this step by-hand";
        quit 1;

        note "First step ...";
        (
            echo "... create subdirectories in ${HOME}";
            umask 0002 && cd && mkdir -p keep/etc || exit 1;

            echo "... save passwd and group files (quickly)";
            cp -pf /etc/group /etc/passwd keep/etc/ || exit 1;

            printf "%-23s %-7s %-23s\n" "$(date +"%x %X")" 1.1 firstStep >> keep/sysconf;

            if sudo pwd; then
                echo "... do step $rootPassword (rootPassword) next";
            else
                echo "... do step $sudoersGroup (sudoersGroup) next";
            fi
        )
        ;;

      ($rootPassword | rootPassword)
        error "Do this step by-hand";
        quit 1;

        note "Set root password using sudo ...";
        (
            echo "... set root password";
            sudo passwd root || exit 1;

            echo "... change default group";
            sudo usermod -g users "${USER}" || exit 1;

            printf "%-23s %-7s %-23s\n" "$(date +"%x %X")" 1.2.R rootPassword >> keep/sysconf;
            echo "... logout and back in again then continue with step mountSysconf";
        )
        ;;

      ($sudoersGroup | sudoersGroup)
        error "Do this step by-hand";
        quit 1;

        note "Add ${USER} to sudoers group using su ...";
        (
            echo "... add ${USER} to sudoers group";
            su -c "
                if fgrep -q "%sudo" /etc/sudoers; then
                    addgroup ${USER} sudo;
                elif fgrep -q "%wheel" /etc/sudoers; then
                    addgroup ${USER} wheel;
                else
                    echo '... no sudo or wheel group in /etc/sudoers';
                fi" || exit 1;

            echo "... change default group";
            su -c "usermod -g users ${USER}" || exit 1;

            printf "%-23s %-7s %-23s\n" "$(date +"%x %X")" 1.2.S sudoersGroup >> keep/sysconf;
            echo "... logout and back in again then continue with step mountSysconf";
        )
        ;;

      ($mountSysconf | mountSysconf)
        error "Do this step by-hand";
        quit 1;

        note "Mount sysconf install share ...";
        (
            if [[ ! -r /etc/sysconf-env ]]; then
                error() { echo -e "\e[35m${0##*/}: \e[31m$@\e[0m"; }
                error "/etc/sysconf-env missing";
                exit 1;
            fi

            echo "... source install environment";
            source /etc/sysconf-env || exit 1;

            echo "... create subdirectories in ${HOME}";
            umask 0002 && cd && mkdir -p keep/dpkg || exit 1;

            echo "... quick save of package list";
            dpkg -l > keep/dpkg/$(date +'%y-%m-%d').a.initial || exit 1;

            echo "... just in case these are missing";
            sudo apt-get install openssh-server || exit 1;
            sudo apt-get install nfs-common || exit 1;

            echo "... mount the installation share";
            sudo mkdir -p "${installShare}" || exit 1;
            sudo mount "${installHost}:${installShare/media/export}" "${installShare}" || exit 1;

            printf "%-23s %-7s %-23s\n" "$(date +"%x %X")" 1.3 mountSysconf >> keep/sysconf;
            echo "... done";
        )
        ;;

      ($installScripts | installScripts)
        error "Do this step by-hand";
        quit 1;

        note "Install shell scripts ...";
        (
            if [[ ! -r /etc/sysconf-env ]]; then
                error() { echo -e "\e[35m${0##*/}: \e[31m$@\e[0m"; }
                error "/etc/sysconf-env missing";
                exit 1;
            fi

            echo "... source install environment";
            source /etc/sysconf-env || exit 1;

            echo "... mount the Python share";
            pythonShare="${installShare/linux/python}";
            sudo mkdir -p "${pythonShare}" || exit 1;
            sudo mount "${installHost}:${pythonShare/media/export}" "${pythonShare}" || exit 1;

            echo "... create subdirectories in ${HOME}";
            umask 0002 && cd && mkdir -p bin tmp || exit 1;

            echo "... install sysconf in ${HOME}/bin";
            cp -pf "${installShare}/sysconf/bin/sysconf" bin || exit 1;

            echo "... install general purpose scripts in ${HOME}/bin";
            cp -pdfL $(ls -d "${installShare}/bin/"*[^~] | fgrep -v 'bin.') bin || exit 1;

            echo "... install administration script in ${HOME}/bin";
            cp -pdfL "${installShare}/bin/bin.adm/"*[^~] bin || exit 1;

            printf "%-23s %-7s %-23s\n" "$(date +"%x %X")" 1.4 installScripts >> keep/sysconf;
            echo "... now run: bin/sysconf bashProfile";
        )
        ;;

      ($bashProfile | bashProfile)
        step="$bashProfile bashProfile";
        note "Configure bash profiles ...";

        DoOrDie mkdir -p keep/bash;

        local file;
        for file in .profile .bash_logout .bashrc; do
            if [[ -e "${file}" && ! -h "${file}" ]]; then
                DoOrDie mv -f "${file}" keep/bash/;
            fi
        done

        DoOrDie ln -s bin/bash* .;
        DoOrDie mv bashrc .bashrc;
        DoOrDie mv bash_logout .bash_logout;
        DoOrDie mv bash_profile .profile;

        fini="logout and back in again";
        ;;

      ($initialSave | initialSave)
        step="$initialSave initialSave";
        note "Initial save of files ...";

        if [[ -z "${RELEASE}" ]]; then
            error '${RELEASE} is not defined';
            quit 1;
        fi

        echo "... save passwd and group files (properly)";
        local file;
        for file in /etc/group /etc/passwd; do
            if [[ -e "keep/${file}" ]]; then
                DoOrDie mv "keep/${file}"{,.${RELEASE}};
            fi
        done

        echo "... save installation package list";
        DoOrDie mkdir -p keep/dpkg;
        DoOrDieLocal dpkglistsave "install.${RELEASE}";
        ;;

      ($numlockOn | numlockOn)
        step="$numlockOn numlockOn";
        note "Configure the console keyboard ...";

        DoOrDie CopyToKeep /etc/kbd/config;
        DoOrDie ApplyPatch /etc/kbd/config;
        ;;

      ($major.99)
        step="$major.99 sanityCheck";
        note "Checking bootstrap ...";
        listLoggedSteps $major | while read step name status; do
            printf "%-7s %-23s %s\n" $step $name $status;
            case "$installDist $name" in
              (*rootPassword)
                CheckCurrent /etc/{group,passwd};
                ;;
              (*initialSave)
                CheckOriginal /etc/{group,passwd};
                # obsolescent - remove next release
                CheckOriginal /boot/grub/grub.cfg;
                CheckOriginal --opt /boot/grub/device.map;
                ;;
              (*numlockOn)
                CheckOriginal /etc/kbd/config;
                CheckPatch /etc/kbd/config;
                ;;
            esac
        done
        quit;
        ;;

      (*)
        badOption "$1";
        listOptions sysconf-bootstrap $major;
        quit 1;
        ;;
    esac
}

### Local Variables: ***
### mode:ksh ***
### End: ***
